%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>

#include "diy.h"
#include "node.h"
#include "tabid.h"
#include "postfix.h"
#include "y.tab.h"

extern FILE *yyout;
extern char **yynames;
extern int trace;

int lbl;
char *mklbl(int n) {
	static char buf[20];
	sprintf(buf, "_i%d", n);
	return strcpy(malloc(strlen(buf)+1),buf);
}

%}

%term END=';'
%term ADD='+' SUB='-' MUL='*' DIV='/' MOD='%'
%term AND='&' OR='|'
%term EQ='=' LT='<' GT='>'

%include "src/y.tab.h"

%%

stmt:     expr                      1 { fprintf(yyout, pfTRASH, pfWORD); }
stmt:     END                       1 { }

expr:     ADD(expr,expr)            1 { fprintf(yyout, pfADD);   }
expr:     SUB(expr,expr)            1 { fprintf(yyout, pfSUB);   }
expr:     MUL(expr,expr)            1 { fprintf(yyout, pfMUL);   }
expr:     DIV(expr,expr)            1 { fprintf(yyout, pfDIV);   }
expr:     MOD(expr,expr)            1 { fprintf(yyout, pfMOD);   }
expr:     EQ(expr,expr)             1 { fprintf(yyout, pfEQ);    }
expr:     NE(expr,expr)             1 { fprintf(yyout, pfNE);    }
expr:     LT(expr,expr)             1 { fprintf(yyout, pfLT);    }
expr:     LE(expr,expr)             1 { fprintf(yyout, pfLE);    }
expr:     GT(expr,expr)             1 { fprintf(yyout, pfGT);    }
expr:     GE(expr,expr)             1 { fprintf(yyout, pfGE);    }
expr:     UMINUS(expr)              1 { fprintf(yyout, pfNEG);   }
expr:     NOT(expr)                 1 { fprintf(yyout, pfIMM pfEQ, 0); }
expr:     AND(and,expr)             1 { fprintf(yyout, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
and:      expr                      1 { p->place = ++lbl; fprintf(yyout, pfDUP pfJZ pfTRASH, mklbl(p->place), pfWORD);  }
expr:     OR(or,expr)               1 { fprintf(yyout, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
or:       expr                      1 { p->place = ++lbl; fprintf(yyout, pfDUP pfJNZ pfTRASH, mklbl(p->place), pfWORD); }

%%

